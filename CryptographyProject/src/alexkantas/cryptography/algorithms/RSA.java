package alexkantas.cryptography.algorithms;

import alexkantas.cryptography.functions.CryptFunction;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;

/**
 *
 * @author Alexandros Kantas
 */
public class RSA {

    private CryptFunction alg = new CryptFunction();
    private KeyPairGenerator kpGen;
    private KeyPair RSA_KeyPair;
    private Cipher c;

    public RSA() throws NoSuchAlgorithmException, NoSuchPaddingException {
        kpGen = KeyPairGenerator.getInstance("RSA");
        kpGen.initialize(2048, new SecureRandom());//init the generator to produse 2048-bit keys and use a random seed
        RSA_KeyPair = kpGen.genKeyPair();//generate a 2048-bit RSA key pair

        c = Cipher.getInstance("RSA/None/PKCS1Padding"); //Make a Chipher for RSA with no mode and PKCS1Padding

    }

    public KeyPair getKeypair() {
        return RSA_KeyPair;
    }

    /**
     * Encypt plaintext using the private key
     *
     * @param plaintext Byte array of plaintext
     * @return Ciphertext in bytes
     * @throws InvalidKeyException
     * @throws IllegalBlockSizeException
     * @throws BadPaddingException
     */
    public byte[] encrypt(byte[] plaintext) throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
        c.init(Cipher.ENCRYPT_MODE, RSA_KeyPair.getPrivate());
        byte[] ciphertext = c.doFinal(plaintext);
        return ciphertext;
    }

    /**
     * Encypt plaintext using the private key
     *
     * @param plaintext Byte array of plaintext
     * @param privateKey PrivateKey for encryption
     * @return Ciphertext in bytes
     * @throws InvalidKeyException
     * @throws IllegalBlockSizeException
     * @throws BadPaddingException
     */
    public byte[] encrypt(byte[] plaintext, PrivateKey privateKey) throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
        c.init(Cipher.ENCRYPT_MODE, privateKey);
        byte[] ciphertext = c.doFinal(plaintext);
        return ciphertext;
    }

    /**
     * Decypt plaintext using the private key
     *
     * @param ciphertext Byte array of plaintext
     * @return Ciphertext in bytes
     * @throws InvalidKeyException
     * @throws IllegalBlockSizeException
     * @throws BadPaddingException
     */
    public byte[] decrypt(byte[] ciphertext) throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
        c.init(Cipher.DECRYPT_MODE, RSA_KeyPair.getPublic());
        byte[] plaintext = c.doFinal(ciphertext);
        return plaintext;
    }

    /**
     * Decypt plaintext using the private key
     *
     * @param ciphertext Byte array of plaintext
     * @param publicKey PublicKey for decryption
     * @return Ciphertext in bytes
     * @throws InvalidKeyException
     * @throws IllegalBlockSizeException
     * @throws BadPaddingException
     */
    public byte[] decrypt(byte[] ciphertext, PublicKey publicKey) throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
        c.init(Cipher.DECRYPT_MODE, publicKey);
        byte[] plaintext = c.doFinal(ciphertext);
        return plaintext;
    }

    public static void main(String[] args) throws NoSuchAlgorithmException, NoSuchPaddingException, IOException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, InvalidKeySpecException {
        CryptFunction alg = new CryptFunction();

        RSA rsa = new RSA();
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();

        Digest digest = new Digest();
        PrivateKey prkey;
        PublicKey pukey;

        String plaintext = "Hello Alex !!!"; //Plaintext
        System.out.println("Org  Plain:" + alg.toHexString(plaintext.getBytes()));
        int plaintextSize = plaintext.getBytes().length; //Plaintext real size
        prkey = rsa.getKeypair().getPrivate();
//        String key = "308204BD020100300D06092A864886F70D0101010500048204A7308204A30201000282010100B6553C772BDFA80AD3D4F321F31B9B4DC461F953760A5AC2390B11E6A688A1DA0EE21C1E94C31BB218110C11E8EC421668984AAEF10086192DCF3D9D5030F5C0F8F826F35A6FFF50DE17FF246BDF39B743128898259B1732D87955BFDAAC23D32B370D9670AFEC22DCFECB399088199B62639F75D666B7BC1AA77B997C1455114E71B9EAFB7FDAD4F0CF69854BB9B0CF72B7CCA18A8B82367571412E5C644D85EF4B5FA6D1BA309A70FEF25CBB2328E51DA1CC5538BDC61E67CE9B6D4C4915691C2532844572E02D0676C3CFF375D4072A9B86185249268780B74B44F0FEF54C7E969F5F57B5F53D94D3A1353EEB2767F0F301150ABE2CA9AFF7158C666363B502030100010282010030E9AABFD97035573A3E7D3ED545C9A2D214EA5ABE66C6B425B357890591CFC17C8EA1B67E77DCBD2901A1B84840E0F5BBF766C989737785D7A929C142DAEF826607C4033276AB0A599A1C62FBE1354D795BC672F25BA99C853FFF85E93696A1B68D1D430755DA45FBFD0A2D961D3CA9577A9C337361B8D6685C17A734070C4E953C099901192C650840745EBEA86D01696D297280D2EB9B79CC5DF0A40BE32312E28C46CF1529275710D0902BDD1F60084943C4F3EB2ECA87B167004431E18D32C7B6B88DC87AD83CDC8C16EE4EE0117C4A0A5A0A48A773B134FB08E755CA990F4531DDBFF63A8A5A0252203BEE415B7DE29332AABE6B4CDDB91CAE5C11828102818100DFE6B06BC1F5BD1FBBF33996886FF7D3E98B831384BDEC652D4C67E6415E89CE53496626830CC6ECDEE665663C64E70304B6C05B7A42C9C8E942375D292F9F7079A00AA6004D8D73586303EC7EA91EB854ADFAAE8046E46DE964FB6029F5BF2DBCEDC3E29B38F1845660508A6DAF14D2AC1CB42472566B39A39B6B4CD8B4D0A102818100D078F81883C156E2F67CCD701FB846A2D2A7A6C406AF64C50B65A29E705F5799E00B03C6B493B1BF9F93C9899D6F11F9844240BA3F50D21C5967617D9377448179D66658A9FB3F2C7C0C4F3C7DF621195CA02BF6B47BB3C6255EDC3C66B7DFA876A300757906D7E2D299C1301C073D8E89C111B391FF4394D09D27C23AA4369502818100C6CCFFEC4DE5B1AD11A6DE852853B28AB81D259F1907C173FC8A90DE43407BBF74F800F944F6FD51A8808D9BFF17E07E2F9B4CA46CA40CA2956A33DA460D80D5CF4828EC47EC9421CC62EE42F81B95A93996D8B44435ADF16180462A96571B0EB367B1BBECF2DC8F125AA668A30707C81F05C5756F080860BF41EA3DEB5470C10281805ADD6F1D9847EBEC0F0D84A9AB59B1880493484FC6AE2A18EC87C72291CE2CAB8808A503B5EF6E191C9FD8C71F94AADBFBB6B8E9B4F1303365107760B9A6D17831B7AE7254DC8AC383EA059B5337B5638D88CEC0C017EEDA9DAD44071BAA6754D128E8E94AF01DA6E2AE5B92F19482531F5DC4AE652342BC9954F6606518F02502818022ADA2A7C8D908ACCE580C1A2325BEA2B2323DC71F878A7F68CF7708FE5C431C3A82CF4384BD9BB4306D41993F3BBBAE6945F35BCB6E5809F093D498A38610B410B2BB04C9494F9AC5F69B0F923546177DCBF94A6CBFC91818A6AAC949FC70916277092A37CD26CA65C1FD1E13F0E42167B1A9F760A949459F890B4F9C9070F7";
//        prkey = alg.stringToPrivateKey(key);
        System.out.println("Priv   key:" + alg.toHexString(prkey.getEncoded()));
        byte[] keydigest = digest.Calc(prkey.getEncoded()); // Digest of private rsa key
        System.out.println("Key digest:" + alg.toHexString(keydigest));
        outputStream.write(keydigest);
        outputStream.write(plaintextSize);
        outputStream.write(plaintext.getBytes());
        byte[] bigplain = outputStream.toByteArray(); //Plaintext with private key digest and length in front
        System.out.println("Big  Plain:" + alg.toHexString(bigplain));
        byte[] ciphertext = rsa.encrypt(bigplain, prkey);
        System.out.println("Encr Plain:" + alg.toHexString(ciphertext));
        pukey = rsa.getKeypair().getPublic();
//        String key = "308204BD020100300D06092A864886F70D0101010500048204A7308204A30201000282010100B6553C772BDFA80AD3D4F321F31B9B4DC461F953760A5AC2390B11E6A688A1DA0EE21C1E94C31BB218110C11E8EC421668984AAEF10086192DCF3D9D5030F5C0F8F826F35A6FFF50DE17FF246BDF39B743128898259B1732D87955BFDAAC23D32B370D9670AFEC22DCFECB399088199B62639F75D666B7BC1AA77B997C1455114E71B9EAFB7FDAD4F0CF69854BB9B0CF72B7CCA18A8B82367571412E5C644D85EF4B5FA6D1BA309A70FEF25CBB2328E51DA1CC5538BDC61E67CE9B6D4C4915691C2532844572E02D0676C3CFF375D4072A9B86185249268780B74B44F0FEF54C7E969F5F57B5F53D94D3A1353EEB2767F0F301150ABE2CA9AFF7158C666363B502030100010282010030E9AABFD97035573A3E7D3ED545C9A2D214EA5ABE66C6B425B357890591CFC17C8EA1B67E77DCBD2901A1B84840E0F5BBF766C989737785D7A929C142DAEF826607C4033276AB0A599A1C62FBE1354D795BC672F25BA99C853FFF85E93696A1B68D1D430755DA45FBFD0A2D961D3CA9577A9C337361B8D6685C17A734070C4E953C099901192C650840745EBEA86D01696D297280D2EB9B79CC5DF0A40BE32312E28C46CF1529275710D0902BDD1F60084943C4F3EB2ECA87B167004431E18D32C7B6B88DC87AD83CDC8C16EE4EE0117C4A0A5A0A48A773B134FB08E755CA990F4531DDBFF63A8A5A0252203BEE415B7DE29332AABE6B4CDDB91CAE5C11828102818100DFE6B06BC1F5BD1FBBF33996886FF7D3E98B831384BDEC652D4C67E6415E89CE53496626830CC6ECDEE665663C64E70304B6C05B7A42C9C8E942375D292F9F7079A00AA6004D8D73586303EC7EA91EB854ADFAAE8046E46DE964FB6029F5BF2DBCEDC3E29B38F1845660508A6DAF14D2AC1CB42472566B39A39B6B4CD8B4D0A102818100D078F81883C156E2F67CCD701FB846A2D2A7A6C406AF64C50B65A29E705F5799E00B03C6B493B1BF9F93C9899D6F11F9844240BA3F50D21C5967617D9377448179D66658A9FB3F2C7C0C4F3C7DF621195CA02BF6B47BB3C6255EDC3C66B7DFA876A300757906D7E2D299C1301C073D8E89C111B391FF4394D09D27C23AA4369502818100C6CCFFEC4DE5B1AD11A6DE852853B28AB81D259F1907C173FC8A90DE43407BBF74F800F944F6FD51A8808D9BFF17E07E2F9B4CA46CA40CA2956A33DA460D80D5CF4828EC47EC9421CC62EE42F81B95A93996D8B44435ADF16180462A96571B0EB367B1BBECF2DC8F125AA668A30707C81F05C5756F080860BF41EA3DEB5470C10281805ADD6F1D9847EBEC0F0D84A9AB59B1880493484FC6AE2A18EC87C72291CE2CAB8808A503B5EF6E191C9FD8C71F94AADBFBB6B8E9B4F1303365107760B9A6D17831B7AE7254DC8AC383EA059B5337B5638D88CEC0C017EEDA9DAD44071BAA6754D128E8E94AF01DA6E2AE5B92F19482531F5DC4AE652342BC9954F6606518F02502818022ADA2A7C8D908ACCE580C1A2325BEA2B2323DC71F878A7F68CF7708FE5C431C3A82CF4384BD9BB4306D41993F3BBBAE6945F35BCB6E5809F093D498A38610B410B2BB04C9494F9AC5F69B0F923546177DCBF94A6CBFC91818A6AAC949FC70916277092A37CD26CA65C1FD1E13F0E42167B1A9F760A949459F890B4F9C9070F7";
//        pukey = alg.stringToPublicKey(key);
        System.out.println("Pub   key:" + alg.toHexString(prkey.getEncoded()));
        byte[] dplain = rsa.decrypt(ciphertext);//Decrepted plain text
        System.out.println("Decr Plain:" + alg.toHexString(dplain));
    }
}
